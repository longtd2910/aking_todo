DROP TABLE IF EXISTS TaskComment;
DROP TABLE IF EXISTS Task;
DROP TABLE IF EXISTS Note;
DROP TABLE IF EXISTS CheckListItem;
DROP TABLE IF EXISTS CheckList;
DROP TABLE IF EXISTS Project;
DROP TABLE IF EXISTS User;

CREATE TABLE User (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  email TEXT NOT NULL,
  name TEXT NOT NULL,
  password TEXT NOT NULL,
  avatar TEXT
);

CREATE TABLE Project (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  title TEXT NOT NULL,
  color TEXT NOT NULL,
  is_default BOOLEAN NOT NULL DEFAULT 0
);

CREATE TABLE CheckList (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  color TEXT NOT NULL,
  project_id INTEGER NOT NULL,
  FOREIGN KEY (project_id) REFERENCES Project(id)
);

CREATE TABLE CheckListItem (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  check_list_id INTEGER NOT NULL,
  title TEXT NOT NULL,
  is_done BOOLEAN DEFAULT 0 NOT NULL,
  `index` INTEGER NOT NULL,
  FOREIGN KEY (check_list_id) REFERENCES CheckList(id)
);

CREATE TABLE Note (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  description TEXT NOT NULL,
  color TEXT NOT NULL,
  project_id INTEGER NOT NULL,
  FOREIGN KEY (project_id) REFERENCES Project(id)
);

CREATE TABLE Task (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  due_date DATE NOT NULL,
  project_id INTEGER NOT NULL,
  FOREIGN KEY (project_id) REFERENCES Project(id)
);

CREATE TABLE TaskComment (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  task_id INTEGER NOT NULL,
  user_id INTEGER NOT NULL,
  comment TEXT NOT NULL,
  date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (task_id) REFERENCES Task(id),
  FOREIGN KEY (user_id) REFERENCES User(id)
);
